/**************************************************************************\
 *
 *  This file is part of a set of example programs for the Coin library.
 *  Copyright (C) 2000-2003 by Systems in Motion. All rights reserved.
 *
 *                   <URL:http://www.coin3d.org>
 *
 *  This sourcecode can be redistributed and/or modified under the
 *  terms of the GNU General Public License version 2 as published by
 *  the Free Software Foundation. See the file COPYING at the root
 *  directory of the distribution for more details.
 *
 *  As a special exception, all sourcecode of the demo examples can be
 *  used for any purpose for licensees of the Coin Professional
 *  Edition License, without the restrictions of the GNU GPL. See our
 *  web pages for information about how to acquire a Professional Edition
 *  License.
 *
 *  Systems in Motion, <URL:http://www.sim.no>, <mailto:support@sim.no>
 *
\**************************************************************************/

#include <stdlib.h>
#include <stdio.h>

#include <Inventor/errors/SoDebugError.h>
#include <Inventor/SoDB.h>
#include <Inventor/SoInput.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/actions/SoCallbackAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/SbViewportRegion.h>

#include <SmallChange/misc/Init.h>
#include <SmallChange/nodes/SmScenery.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>

static const char * appname = NULL;
static const char * ivfile = NULL;

class Examiner : public So@Gui@ExaminerViewer {
public:
  SoSearchAction * saction;
  SoCallbackAction * cbaction;
  Examiner(void) : So@Gui@ExaminerViewer() {
    saction = new SoSearchAction;
    cbaction = new SoCallbackAction(SbViewportRegion(100, 100));
    cbaction->addPreCallback(SmScenery::getClassTypeId(), SmScenery::evaluateS, NULL);
  }
  ~Examiner() {
    delete saction;
    delete cbaction;
  }
  virtual void actualRedraw(void) {
    // update hotspot and evaluate for SmScenery nodes
    saction->reset();
    saction->setType(SmScenery::getClassTypeId());
    saction->setInterest(SoSearchAction::FIRST);
    saction->apply(this->getSceneManager()->getSceneGraph());
    SmScenery * scenery = NULL;
    if ( saction->getPath() ) {
      scenery = (SmScenery *) saction->getPath()->getTail();
      cbaction->setViewportRegion(this->getViewportRegion());
      cbaction->apply(this->getSceneManager()->getSceneGraph());
      scenery->preFrame();
    }
    So@Gui@ExaminerViewer::actualRedraw();
    if ( scenery ) {
      if ( scenery->postFrame() )
        So@Gui@ExaminerViewer::scheduleRedraw();
    }
  }
  virtual SbBool processSoEvent(const SoEvent * const ev) {
    if ( !this->isViewing() ) {
      saction->reset();
      saction->setType(SmScenery::getClassTypeId());
      saction->setInterest(SoSearchAction::FIRST);
      saction->apply(this->getSceneManager()->getSceneGraph());
      SmScenery * scenery = NULL;
      if ( saction->getPath() ) {
        scenery = (SmScenery *) saction->getPath()->getTail();
      }
      SbBool info = FALSE;
      SbBool retval = FALSE;
      if ( SO_KEY_PRESS_EVENT(ev, E) ) {
        if ( scenery ) {
          if ( scenery->elevationLines.getValue() ) {
            scenery->elevationLines.setValue(FALSE);
          }
          else {
            scenery->elevationLines.setValue(TRUE);
            info = TRUE;
          }
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, A) ) {
        if ( scenery ) {
          scenery->elevationLineOffset =
            scenery->elevationLineOffset.getValue() + 10.0f;
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, Z) ) {
        if ( scenery ) {
          scenery->elevationLineOffset =
            scenery->elevationLineOffset.getValue() - 10.0f;
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, S) ) {
        if ( scenery ) {
          scenery->elevationLineDistance =
            scenery->elevationLineDistance.getValue() * 2.0f;
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, X) ) {
        if ( scenery ) {
          scenery->elevationLineDistance =
            scenery->elevationLineDistance.getValue() / 2.0f;
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, D) ) {
        if ( scenery ) {
          scenery->elevationLineThickness =
            scenery->elevationLineThickness.getValue() + 0.5f;
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, C) ) {
        if ( scenery ) {
          scenery->elevationLineThickness =
            scenery->elevationLineThickness.getValue() - 0.5f;
          if ( scenery->elevationLineThickness.getValue() < 0.5f ) {
            scenery->elevationLineThickness = 0.5f;
          }
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, F) ) {
        if ( scenery ) {
          if ( scenery->elevationLineEmphasis.getValue() == 0 ) {
            scenery->elevationLineEmphasis.setValue(2);
          }
          else {
            scenery->elevationLineEmphasis =
              scenery->elevationLineEmphasis.getValue() + 1;
          }
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, V) ) {
        if ( scenery ) {
          if ( scenery->elevationLineEmphasis.getValue() <= 2 ) {
            scenery->elevationLineEmphasis = 0;
          }
          else {
            scenery->elevationLineEmphasis =
              scenery->elevationLineEmphasis.getValue() - 1;
          }
          info = TRUE;
        }
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, Q) ) {
        // Q for clear scene graph
        this->setSceneGraph(NULL);
        retval = TRUE;
      }
      else if ( SO_KEY_PRESS_EVENT(ev, R) ) {
        // R for reload scene graph - for memory leak checking
        fprintf(stderr, "%s message: R received\n", appname);
        assert(appname && ivfile);
        SoInput in;
        SoSeparator * root = NULL;
        if ( !in.openFile(ivfile) ) {
          fprintf(stderr, "%s error: unable to open '%s'\n", appname, ivfile);
        }
        else {
          root = SoDB::readAll(&in);
          fprintf(stderr, "%s message: read scene (%p) from '%s'\n", appname, root, ivfile);
        }
        this->setSceneGraph(root);
        this->viewAll();
        retval = TRUE;
      }
      if ( (info == TRUE) && !scenery->elevationLines.getValue() ) {
        info = FALSE;
        retval = TRUE;
      }
      else if ( SO_KEY_RELEASE_EVENT(ev, E) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, A) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, Z) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, S) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, X) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, D) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, C) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, F) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, V) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, Q) ) { retval = TRUE; }
      else if ( SO_KEY_RELEASE_EVENT(ev, R) ) { retval = TRUE; }
      if ( info ) {
        printf("---------------------------------------\n");
        printf("line distance   : %g\n", scenery->elevationLineDistance.getValue());
        printf("line offset     : %g\n", scenery->elevationLineOffset.getValue());
        printf("line thickness  : %g\n", scenery->elevationLineThickness.getValue());
        if ( scenery->elevationLineEmphasis.getValue() > 1 ) {
          printf("emphasis on every %d. line\n", scenery->elevationLineEmphasis.getValue());
        }
      }
      if ( retval ) {
        return retval;
      }
    }
    return So@Gui@ExaminerViewer::processSoEvent(ev);
  }
};

// *************************************************************************

int
main(
  int argc,
  char ** argv )
{
  So@Gui@::init( argv[0] );
  smallchange_init();

  if ( argc != 2 ) {
    fprintf(stderr, "usage: %s file.iv\n", argv[0]);
    exit(-1);
  }

  SoInput in;
  if ( !in.openFile(argv[1]) ) {
    fprintf(stderr, "%s error: unable to open '%s'\n", argv[0], argv[1]);
    exit(-1);
  }

  SoSeparator * root = SoDB::readAll(&in);
  if ( !root )
    return -1;

  appname = argv[0];
  ivfile = argv[1];

  Examiner * viewer = new Examiner();

  viewer->setSceneGraph(root);
  viewer->show();

  So@Gui@::mainLoop();

  delete viewer;
  return 0;
} // main()

// *************************************************************************
