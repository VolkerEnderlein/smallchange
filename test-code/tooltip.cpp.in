#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/viewers/So@Gui@ExaminerViewer.h>
#include <Inventor/SoDB.h>
#include <Inventor/nodes/SoSeparator.h>
#include <assert.h>
#include <Inventor/SoInput.h>
#include <Inventor/SoOutput.h>
#include <SmallChange/misc/Init.h>
#include <SmallChange/nodekits/SmTooltipKit.h>
#include <Inventor/actions/SoGetBoundingBoxAction.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/SoPickedPoint.h>
#include <Inventor/details/SoFaceDetail.h>

typedef struct {
  So@Gui@ExaminerViewer * viewer;
  SmTooltipKit * tooltip;
} myclosure;


static void 
mousebutton_cb(void * closure, SoEventCallback * node)
{
  myclosure * data = (myclosure*) closure;

  if (!SO_MOUSE_RELEASE_EVENT(node->getEvent(), BUTTON1)) return;

  SmTooltipKit * tooltip = (SmTooltipKit*) data->tooltip;  

  const SoPickedPoint * pp = node->getPickedPoint();
  if (pp) {
    
    SbVec3f p = pp->getObjectPoint();
    SbVec3f n = pp->getObjectNormal();
    SbVec4f tc = pp->getObjectTextureCoords();
    int midx = pp->getMaterialIndex();

    SoFaceDetail * facedetail = NULL;
    const SoDetail * detail = pp->getDetail();
    if (detail && detail->isOfType(SoFaceDetail::getClassTypeId())) {
      facedetail = (SoFaceDetail*) detail;
    }
    SbString tmp;
    tooltip->description.setNum(facedetail ? 6 : 5);
    tooltip->description.set1Value(0, "Picked point info:");
    tmp.sprintf("Point: %.2g %.2g %.2g", p[0], p[1], p[2]);
    tooltip->description.set1Value(1, tmp.getString());
    tmp.sprintf("Normal: %.2g %.2g %.2g", n[0], n[1], n[2]);
    tooltip->description.set1Value(2, tmp.getString());
    tmp.sprintf("TexCoord: %.2g %.2g", tc[0], tc[1]);
    tooltip->description.set1Value(3, tmp.getString());
    tmp.sprintf("Mat. idx.: %d", midx);
    tooltip->description.set1Value(4, tmp.getString());

    if (facedetail) {
      tmp.sprintf("Face idx.: %d", facedetail->getFaceIndex());
      tooltip->description.set1Value(5, tmp.getString());
    }

    tooltip->setPickedPoint(node->getPickedPoint(), 
                            data->viewer->getViewportRegion());
  }
  else tooltip->isActive = FALSE;
}

static void
usage(void)
{
  fprintf(stderr,"Usage: tooltip <infile>\n");
}

int
main(int argc, char ** argv )
{
  if (argc == 1) { usage(); return 0; }
    
  @WIDGET@ window = So@Gui@::init( argv[0] );
  smallchange_init();
    
  So@Gui@ExaminerViewer * ex1 = new So@Gui@ExaminerViewer( window );
  ex1->setBackgroundColor(SbColor(0.1f, 0.3f, 0.5f));
  
  SoInput input;
  SbBool ok = input.openFile(argv[1]);
  if (!ok) {
    fprintf(stderr,"Unable to open file.\n");
    return -1;
  }

  SoSeparator *root = SoDB::readAll(&input); 
  if (!root) {
    fprintf(stderr,"Unable to read file.\n");
    return -1;
  }

  root->ref();

  fprintf(stderr,"\nPick a shape to get some tooltip info\n\n");

  SmTooltipKit * tooltip = new SmTooltipKit;
  SoEventCallback * ec = new SoEventCallback;

  myclosure data;
  data.viewer = ex1;
  data.tooltip = tooltip;

  ec->addEventCallback(SoMouseButtonEvent::getClassTypeId(),
                       mousebutton_cb, &data);
  ex1->setSceneGraph(root);
  
  root->addChild(ec);
  root->addChild(tooltip);

  ex1->setTransparencyType(SoGLRenderAction::SORTED_OBJECT_BLEND);
  ex1->show();
  ex1->setViewing(FALSE);
  So@Gui@::show( window );
  So@Gui@::mainLoop();
  delete ex1;
  root->unref();
  return 0;
} // main()

