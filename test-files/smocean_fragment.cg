struct smoutput2 {
  float4 color : COLOR;
};

float3 expand(float3 v)
{
  return (v - 0.5) * 2.0;
}

void main(const in float4 color : COLOR0,
          const in float4 params : COLOR1,
          const in sampler2D normalmap : TEXUNIT0,
          const in samplerCUBE diffusemap : TEXUNIT1,
          float2 bumpcoord : TEXCOORD0,
          float3 lightdir : TEXCOORD1, 
          float3 halfangle : TEXCOORD2,
          float3 ray : TEXCOORD3,
          out smoutput2 OUT)
{
  // float3 n = float3(0,0,1); // FIXME: get normal from normal map
  float3 n = expand(tex2D(normalmap, bumpcoord).xyz);
  n.xy *= params[0];
  n = normalize(n);
  float3 l = normalize(lightdir); // FIXME: use normalization cube map instead

  float d = lightdir.z > 0 ? saturate(dot(l, n)) : 0;

  // specular component is disabled for now
  float3 h = normalize(halfangle);
  // fixme do a lookup in a 1D specular texture?
  float s = saturate(dot(h, n));
  float s2 = s * s;
  float s4 = s2 * s2;
  float s8 = s4 * s4;
  float s16 = s8 * s8;
  float s32 = s16 * s16;
  float s64 = d > 0 ? s32 * s32 : 0;
  
  float3 speccol = float3(1, 1, 1);
  float3 r = reflect(ray, n);
  // float3 diffuse = texCUBE(diffusemap, r);
  float3 diffuse = color.xyz;
  OUT.color = float4(diffuse.rgb * d + speccol * s64, color.a);
  // OUT.color = float4(diffuse.xyz * d, color.w);
}

