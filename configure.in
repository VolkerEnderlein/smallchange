#  This can be any file in the package.
AC_INIT(lib/SmallChange/nodes/DepthBuffer.cpp)
AC_CONFIG_AUX_DIR(cfg)

# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it and to generate an MSWindows .dll file.

AC_CANONICAL_SYSTEM

SIM_AC_SETUP_MSVC_IFELSE([], [
  case $host in
  *-cygwin)
    AC_MSG_ERROR([You need Microsoft Visual C++ to build SmallChange on Cygwin])
    ;;
  esac
])

AM_CONDITIONAL(BUILD_WITH_MSVC, $BUILD_WITH_MSVC)

SMALLCHANGE_MAJOR_VERSION=1
SMALLCHANGE_MINOR_VERSION=0
SMALLCHANGE_MICRO_VERSION=0
SMALLCHANGE_VERSION=$SMALLCHANGE_MAJOR_VERSION.$SMALLCHANGE_MINOR_VERSION.$SMALLCHANGE_MICRO_VERSION
VERSION=$SMALLCHANGE_VERSION

AC_SUBST(SMALLCHANGE_MAJOR_VERSION)
AC_SUBST(SMALLCHANGE_MINOR_VERSION)
AC_SUBST(SMALLCHANGE_MICRO_VERSION)
AC_SUBST(SMALLCHANGE_VERSION)

SC_MAJOR=$SMALLCHANGE_MAJOR_VERSION

# Libtool versioning
LT_CURRENT=$SMALLCHANGE_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $SMALLCHANGE_MINOR_VERSION \* 100 + $SMALLCHANGE_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

AC_DEFINE_UNQUOTED([SMALLCHANGE_MAJOR_VERSION], [$SMALLCHANGE_MAJOR_VERSION],
  [define this to the libSmallchange major version number])
AC_DEFINE_UNQUOTED([SMALLCHANGE_MINOR_VERSION], [$SMALLCHANGE_MINOR_VERSION],
  [define this to the libSmallchange minor version number])
AC_DEFINE_UNQUOTED([SMALLCHANGE_MICRO_VERSION], [$SMALLCHANGE_MICRO_VERSION],
  [define this to the libSmallchange release version number])
AC_DEFINE_UNQUOTED([SMALLCHANGE_VERSION], ["$SMALLCHANGE_VERSION"],
  [define this to the full libSmallchange major.minor.micro version number])

# *******************************************************************
# Miscellaneous options and initializations.

smallchange_build_dir=`pwd`

# **************************************************************************
#  Locate C++ compiler and set C++ as the default language to use
#  in tests. The configure script will automatically terminate if
#  it doesn't find a C++ compiler.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_LANG_CPLUSPLUS

AC_CHECK_HEADERS([windows.h unistd.h])

AM_INIT_AUTOMAKE(SmallChange, $VERSION)

#  Files to cram results from the configure tests into.
AM_CONFIG_HEADER(config.h)

#  Default to not building a shared library.
#  Can be overridden by the user with --enable-shared.
AM_DISABLE_SHARED

#  Turn off default maintainer make-rules -- use ./bootstrap instead.
AM_MAINTAINER_MODE

if $BUILD_WITH_MSVC; then
  RANLIB=true
  export RANLIB
else

#  Initialize libtool
AC_PROG_LIBTOOL

case "$host_os" in
  irix*)
    if test x"${AR+set}" != x"set"; then
      if test x"$CXX" = xCC; then
        echo "modifying libtool"
        mv libtool libtool.orig
        sed -e 's/\\\$AR cru/CC -ar -o/' <libtool.orig >libtool
        chmod 755 libtool
        rm -f libtool.org
      fi
    fi
    ;;
esac

fi

#  These are used for constructing the coin-config file.
# COIN_EXTRA_CPPFLAGS=$CPPFLAGS
# COIN_EXTRA_LDFLAGS=$LDFLAGS
# COIN_EXTRA_LIBS=$LIBS
# AC_SUBST(COIN_EXTRA_CPPFLAGS)
# AC_SUBST(COIN_EXTRA_LDFLAGS)
# AC_SUBST(COIN_EXTRA_LIBS)

SIM_AC_DEBUGSYMBOLS
SIM_AC_RTTI_SUPPORT
SIM_EXCEPTION_HANDLING
SIM_PROFILING_SUPPORT
SIM_COMPILER_WARNINGS

case $enable_static in
yes | true)  SMALLCHANGE_STATIC=true;;
*)           SMALLCHANGE_STATIC=false;;
esac

case $enable_shared in
yes | true)  SMALLCHANGE_STATIC=false;;
*)           SMALLCHANGE_STATIC=true;;
esac

SIM_AC_COMPILE_DEBUG([
#  CPPFLAGS="$CPPFLAGS"
], [
#  CPPFLAGS="$CPPFLAGS -DNDEBUG"
])

# huh?  What is this?
# case $enable_debug in
# yes | true)  SMALLCHANGE_SHARED=true;;
# *)           SMALLCHANGE_SHARED=false;;
# esac

LIBFLAGS=
AC_SUBST(LIBFLAGS)

if test x"${with_inventor+set}" = x"set" &&
   test x"${with_inventor}" != x"no"; then
  SIM_AC_HAVE_INVENTOR_IFELSE([
    CPPFLAGS="$sim_ac_inventor_cppflags $CPPFLAGS"
    LDFLAGS="$sim_ac_inventor_ldflags $LDFLAGS"
    LIBS="$sim_ac_inventor_libs $LIBS"
  ], [AC_MSG_ERROR(couldn't compile and link against Open Inventor)])
  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [SGI/TGS Inventor])
else
  SIM_AC_HAVE_COIN_IFELSE([
    CPPFLAGS="$CPPFLAGS $sim_ac_coin_cppflags"
    LDFLAGS="$LDFLAGS $sim_ac_coin_ldflags"
    LIBS="$sim_ac_coin_libs $LIBS"
  ], [AC_MSG_ERROR(couldn't compile and link against Coin)])
  SIM_AC_CONFIGURATION_SETTING([Open Inventor brand], [Coin])
fi

if $BUILD_WITH_MSVC; then
  if $SMALLCHANGE_STATIC; then
    :
  else
    CPPFLAGS="-DSMALLCHANGE_MAKE_DLL $CPPFLAGS"
    SMALLCHANGE_EXTRA_CPPFLAGS="$SMALLCHANGE_EXTRA_CPPFLAGS -DSMALLCHANGE_DLL"
  fi
  debugfile="`pwd`/lib/SmallChange/SmallChange${SC_MAJOR}.pdb"
  debugfile=`cygpath -w "$debugfile" | sed 's,\\\\,\\\\\\\\,g'`
  if $SMALLCHANGE_STATIC; then
    SIM_AC_CONFIGURATION_SETTING([SmallChange build type], [static .lib])
    LIBFLAGS="-LIB"
    LIBFLAGS="$LIBFLAGS /OUT:SmallChange$SC_MAJOR.lib"
    SMALLCHANGE_EXTRA_CPPFLAGS="-I$includedir"
    SMALLCHANGE_EXTRA_LDFLAGS="-L$libdir"
    SMALLCHANGE_EXTRA_LIBS=
  else
    LIBFLAGS="-DLL /INCREMENTAL:NO"
    case $enable_symbols in
    no | false)
      SIM_AC_CONFIGURATION_SETTING([SmallChange build type],
                                   [dynamic .dll, no symbols])
      LIBFLAGS="$LIBFLAGS /RELEASE"
      ;;
    *)
      SIM_AC_CONFIGURATION_SETTING([SmallChange build type],
                                   [dynamic .dll + .pdb])
      CFLAGS="/Fd$debugfile $CFLAGS"
      CXXFLAGS="/Fd$debugfile $CXXFLAGS"
      LIBFLAGS="$LIBFLAGS /DEBUG /PDB:SmallChange$SMALLCHANGE_MAJOR_VERSION.pdb"
      ;;
    esac

    LIBFLAGS="$LIBFLAGS /OUT:SmallChange$SC_MAJOR.dll"
  fi

  SMALLCHANGE_EXTRA_LIBS="-lSmallChange$SC_MAJOR $SMALLCHANGE_EXTRA_LIBS"
else
  SMALLCHANGE_EXTRA_LIBS="-lSmallChange $SMALLCHANGE_EXTRA_LIBS"
fi


SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

AC_OUTPUT([
        Makefile
        lib/Makefile
        lib/SmallChange/Makefile
	lib/SmallChange/nodekits/Makefile
	lib/SmallChange/nodes/Makefile
	lib/SmallChange/elements/Makefile
	lib/SmallChange/engines/Makefile
])

SIM_AC_CONFIGURATION_SETTING([Install prefix], [$prefix])

SIM_AC_CONFIGURATION_SUMMARY

echo ""
echo "Now, run 'make' and 'make install' to install $PACKAGE"
echo ""

