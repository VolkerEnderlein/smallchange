#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>
#include <Inventor/actions/SoSearchAction.h>
#include <Inventor/actions/SoHandleEventAction.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/So@Gui@RenderArea.h>
#include <SmallChange/misc/Init.h>
#include <SmallChange/nodekits/SmCameraControlKit.h>
#include <SmallChange/eventhandlers/SmExaminerEventHandler.h>
#include <SmallChange/eventhandlers/SmHelicopterEventHandler.h>
#include <SmallChange/eventhandlers/SmSphereEventHandler.h>
#include <Inventor/nodes/SoRotation.h>
#include <Inventor/nodes/SoEventCallback.h>
#include <Inventor/nodes/SoTexture2.h>
#include <Inventor/events/SoKeyboardEvent.h>
#include <Inventor/events/SoMouseButtonEvent.h>
#include <Inventor/sensors/SoFieldSensor.h>
#include <SmallChange/misc/SmSceneManager.h>
#include <SmallChange/nodes/SmViewpointWrapper.h>
#include <SmallChange/nodekits/SmPopupMenuKit.h>
#include <stdio.h>

typedef struct {
  SmSceneManager * scenemgr;
  SmPopupMenuKit * menu;
} scenedata;

static void
handle_key_press_event(const SoEvent * e, SmSceneManager * scenemgr)
{
  if (SO_KEY_PRESS_EVENT(e, W)) {
    scenemgr->setRenderMode(SmSceneManager::WIREFRAME);
  }
  else if (SO_KEY_PRESS_EVENT(e, A)) {
    scenemgr->setRenderMode(SmSceneManager::AS_IS);
  }
  else if (SO_KEY_PRESS_EVENT(e, P)) {
    scenemgr->setRenderMode(SmSceneManager::POINTS);
  }
  else if (SO_KEY_PRESS_EVENT(e, B)) {
    scenemgr->setRenderMode(SmSceneManager::BOUNDING_BOX);
  }
  else if (SO_KEY_PRESS_EVENT(e, O)) {
    scenemgr->setRenderMode(SmSceneManager::WIREFRAME_OVERLAY);
  }
  else if (SO_KEY_PRESS_EVENT(e, H)) {
    scenemgr->setRenderMode(SmSceneManager::HIDDEN_LINE);
  }
  else if (SO_KEY_PRESS_EVENT(e, S)) {
    if (scenemgr->getStereoMode() == SmSceneManager::RED_CYAN) {
      scenemgr->setStereoMode(SmSceneManager::MONO);
    }
    else {
      scenemgr->setStereoMode(SmSceneManager::RED_CYAN);
    }
  }
  else if (SO_KEY_PRESS_EVENT(e, T)) {
    scenemgr->setTexturesEnabled(!scenemgr->isTexturesEnabled());
  }
  scenemgr->scheduleRedraw();
}

static void
menusensor_cb(void * userdata, SoSensor * s)
{
  scenedata * data = (scenedata*) userdata;
  SmSceneManager * scenemgr = data->scenemgr;
  SmPopupMenuKit * menu = data->menu;

  SoKeyboardEvent::Key key = SoKeyboardEvent::ANY;

  int idx = menu->pickedItem.getValue();
  switch (idx) {
  case 0:
    key = SoKeyboardEvent::A;
    break;
  case 1:
    key = SoKeyboardEvent::W;
    break;
  case 2:
    key = SoKeyboardEvent::O;
    break;
  case 3:
    key = SoKeyboardEvent::P;
    break;
  case 4:
    key = SoKeyboardEvent::B;
    break;
  case 5:
    key = SoKeyboardEvent::H;
    break;
  default:
    break;
  }

  if (key != SoKeyboardEvent::ANY) {
    SoKeyboardEvent ke;
    ke.setKey(key);
    ke.setState(SoButtonEvent::DOWN);
    handle_key_press_event(&ke, scenemgr);
  }
}


static void 
mbevent_cb(void * userdata, SoEventCallback * node)
{
  const SoEvent * e = node->getEvent();
  SoHandleEventAction * a = node->getAction();
  if (SO_MOUSE_RELEASE_EVENT(e, BUTTON2)) {
    SmPopupMenuKit * kit = (SmPopupMenuKit*) userdata;
    if (!kit->visible.getValue()) {
      kit->visible = TRUE;
      kit->isActive = TRUE;
      kit->setNormalizedPosition(e->getNormalizedPosition(a->getViewportRegion()));
    }
  }
}

static void 
event_cb(void * userdata, SoEventCallback * node)
{
  SmSceneManager * scenemgr = (SmSceneManager*) userdata;
  const SoEvent * e = node->getEvent();

  handle_key_press_event(e, scenemgr);
}

// *************************************************************************

int
main(int argc, char ** argv )
{
  if (argc == 1) {
    fprintf(stderr,"Usage: scenemgr <ivfile> [-m helicopter|examiner|sphere] [speed]] [-t menutex]\n");
    return -1;
  } 
  @WIDGET@ window = So@Gui@::init( argv[0] );
  if (window == NULL) return -1;

  smallchange_init();
  SoDB::setRealTimeInterval(SbTime(1.0/50.0));
  
  SoInput * input = new SoInput;
  SbBool ok = input->openFile(argv[1]);
  if (!ok) {
    fprintf(stderr,"Unable to open file.\n");
    return -1;
  }

  SoSeparator *root = SoDB::readAll(input); 
  if (!root) {
    fprintf(stderr,"Unable to read file.\n");
    return -1;
  }
  root->ref();

  SmCameraControlKit * ck = NULL;
  
  SoSearchAction sa;
  sa.setType(SmCameraControlKit::getClassTypeId());
  sa.setInterest(SoSearchAction::FIRST);
  sa.apply(root);
  if (sa.getPath()) {
    ck = (SmCameraControlKit*) sa.getPath()->getTail();
    ck->ref();
  }
  else {
    ck = new SmCameraControlKit;
    ck->ref();
    ck->viewUp = SbVec3f(0.0f, 1.0f, 0.0f);
    ck->setPart("scene", root);
  }

  char * menutex = NULL;

  int i = 1;
  while (i < argc) {
    if (strcmp(argv[i], "-m") == 0 && i < argc-1) {
      i++;
      if (strcmp(argv[i], "helicopter") == 0) {
        SmHelicopterEventHandler *helihandler;
        ck->eventHandler = helihandler = new SmHelicopterEventHandler;
        i++;
        if (i < argc) { 
          helihandler->speed.setValue(atof(argv[i]));
          i++;
        }
      }
      else if (strcmp(argv[i], "examiner") == 0) {
        ck->eventHandler = new SmExaminerEventHandler;
      } 
      else if (strcmp(argv[i], "sphere") == 0) {
        ck->eventHandler = new SmSphereEventHandler;
      }
      else {
        fprintf(stderr,"Unknown event handler. Using examiner\n");
        i++;
      }
    }
    else if (strcmp(argv[i], "-t") == 0 && i < argc-1) {
      i++;
      menutex = argv[i];
      i++;
    }
    else i++;
  }
  
  SoCamera * camera = NULL;
  
  // handle VRML97 Viewpoints
  if (SmViewpointWrapper::hasViewpoints(root)) {
    camera = new SmViewpointWrapper;
    ((SmViewpointWrapper*)camera)->setSceneGraph(root);
    ck->setPart("camera", camera);
  }
  else {
    camera = (SoCamera*) ck->getPart("camera", TRUE);
  }

  So@Gui@RenderArea * renderarea = new So@Gui@RenderArea( window );

  // workaround for SoGui bug. The old SceneManager isn't deleted
  renderarea->getSceneManager()->setRenderCallback(NULL, NULL);
  renderarea->getSceneManager()->deactivate();

  SmSceneManager * scenemgr = new SmSceneManager;
  renderarea->setSceneManager(scenemgr);
  scenemgr->activate();

  SmPopupMenuKit * menu = new SmPopupMenuKit;

  if (menutex) {
    SoTexture2 * tex = new SoTexture2;
    tex->filename = menutex;
    menu->setPart("backgroundTexture", tex);
  }  
  const char * items[] = {
    "As Is",
    "Wireframe",
    "Wireframe overlay",
    "Points",
    "BBox",
    "Hidden line"
  };
  menu->itemList.setValues(0, 6, items);

  scenedata data;
  data.scenemgr = scenemgr;
  data.menu = menu;

  SoFieldSensor * menusensor = new SoFieldSensor(menusensor_cb, &data);
  menusensor->attach(&menu->pickedItem);

  SoEventCallback * ec = new SoEventCallback;
  ec->addEventCallback(SoKeyboardEvent::getClassTypeId(), event_cb, scenemgr);
  ec->addEventCallback(SoMouseButtonEvent::getClassTypeId(), mbevent_cb, menu);
  root->insertChild(ec, 0);
  root->insertChild(menu, 0);

  renderarea->setTransparencyType(SoGLRenderAction::SORTED_OBJECT_BLEND);
  renderarea->setSceneGraph(ck);
  scenemgr->setCamera(camera); // cache camera
  renderarea->setBackgroundColor( SbColor( 0.0f, 0.2f, 0.3f )  );
  renderarea->show();
  So@Gui@::show( window );
  if (!camera->isOfType(SmViewpointWrapper::getClassTypeId())) {
    ck->viewAll(renderarea->getViewportRegion());
  }
  So@Gui@::mainLoop();

  delete renderarea;
  delete menusensor;
  

  root->unref();
  ck->unref();

  return 0;
} // main()

// *************************************************************************
